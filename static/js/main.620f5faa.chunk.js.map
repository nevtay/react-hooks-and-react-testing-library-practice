{"version":3,"sources":["Hello.js","App.js","hooks/useForm.js","serviceWorker.js","index.js"],"names":["Hello","useState","storedName","JSON","parse","localStorage","getItem","name","setName","useEffect","setItem","stringify","style","display","flexFlow","alignItems","padding","aria-label","margin","onClick","e","preventDefault","prompt","marginRight","marginLeft","App","initialValues","values","setValues","target","value","useForm","email","password","inputs","setInputs","className","id","minWidth","justifyContent","alignSelf","htmlFor","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAEaA,EAAQ,WAAO,IAAD,EACDC,oBAAS,WAC/B,IAAMC,EAAaC,KAAKC,MAAMC,aAAaC,QAAQ,SACnD,OAAKJ,GACI,cAJc,mBAClBK,EADkB,KACZC,EADY,KAyBzB,OAJAC,qBAAU,WACRJ,aAAaK,QAAQ,OAAQP,KAAKQ,UAAUJ,MAC3C,CAACA,IAGF,yBAAKK,MAAO,CAAEC,QAAS,OAAQC,SAAU,cAAeC,WAAY,SAAUC,QAAS,SACrF,wBAAIC,aAAW,iBAAf,SAAsCV,EAAtC,KACA,yBAAKK,MAAO,CAAEC,QAAS,OAAQG,QAAS,OAAQE,OAAQ,SACtD,4BACEC,QApBc,SAACC,GACrBA,EAAEC,iBACFb,EAAQc,OAAO,oBACfjB,aAAaK,QAAQ,OAAQP,KAAKQ,UAAUJ,KAkBtCK,MAAO,CAAEC,QAAS,QAASU,YAAa,SAF1C,eAKA,4BACEJ,QAnBgB,WACtBX,EAAQ,YACRH,aAAaK,QAAQ,OAAQP,KAAKQ,UAAUJ,KAkBtCK,MAAO,CAAEC,QAAS,QAASW,WAAY,UAFzC,iBCmCOC,EAlEH,WAAO,IAAD,ECHK,SAACC,GAAmB,IAAD,EACZzB,mBAASyB,GADG,mBACjCC,EADiC,KACzBC,EADyB,KAGxC,MAAO,CACLD,EACA,SAAAP,GACEQ,EAAU,2BAAKD,GAAN,kBAAeP,EAAES,OAAOtB,KAAOa,EAAES,OAAOC,WDFzBC,CAAQ,CAClCxB,KAAM,IACNyB,MAAO,IACPC,SAAU,MAJI,mBACTC,EADS,KACDC,EADC,KAehB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,0BAAMC,GAAG,iBACPzB,MAAO,CAAE0B,SAAU,OAAQzB,QAAS,OAAQC,SAAU,cAAeE,QAAS,SAC9E,yBAAKJ,MAAO,CAAEC,QAAS,OAAQC,SAAU,WAAYI,OAAQ,OAAQqB,eAAgB,gBAAiBD,SAAU,UAC9G,2BACE1B,MAAO,CAAE4B,UAAW,cACpBC,QAAQ,QAFV,SAIA,2BACExB,aAAW,aACXV,KAAK,OACLuB,MAAOI,EAAO3B,KACdmC,YAAY,aACZC,SAAUR,KAGd,6BACA,yBAAKvB,MAAO,CAAEC,QAAS,OAAQC,SAAU,WAAYI,OAAQ,OAAQqB,eAAgB,gBAAiBD,SAAU,UAC9G,2BACE1B,MAAO,CAAE4B,UAAW,cACpBC,QAAQ,SAFV,UAIA,2BACExB,aAAW,cACXV,KAAK,QACLuB,MAAOI,EAAOF,MACdU,YAAY,cACZC,SAAUR,KAEd,6BAEA,yBAAKvB,MAAO,CAAEC,QAAS,OAAQC,SAAU,WAAYI,OAAQ,OAAQqB,eAAgB,gBAAiBD,SAAU,UAC9G,2BACE1B,MAAO,CAAEC,QAAS,OAAQ0B,eAAgB,cAC1CE,QAAQ,YAFV,aAIA,2BACExB,aAAW,iBACXV,KAAK,WACLuB,MAAOI,EAAOD,SACdS,YAAY,iBACZC,SAAUR,QEnDFS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.620f5faa.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nexport const Hello = () => {\r\n  const [name, setName] = useState(() => {\r\n    const storedName = JSON.parse(localStorage.getItem('name'))\r\n    if (!storedName) {\r\n      return 'Stranger'\r\n    } else {\r\n      return storedName\r\n    }\r\n  })\r\n\r\n  const handleSetName = (e) => {\r\n    e.preventDefault()\r\n    setName(prompt('Enter your name'))\r\n    localStorage.setItem('name', JSON.stringify(name))\r\n  }\r\n\r\n  const handleResetName = () => {\r\n    setName('Stranger')\r\n    localStorage.setItem('name', JSON.stringify(name))\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('name', JSON.stringify(name))\r\n  }, [name])\r\n\r\n  return (\r\n    <div style={{ display: 'flex', flexFlow: 'column wrap', alignItems: 'center', padding: '10px' }}>\r\n      <h1 aria-label=\"greeting-name\">Hello {name}!</h1>\r\n      <div style={{ display: 'flex', padding: '10px', margin: 'auto' }}>\r\n        <button\r\n          onClick={handleSetName}\r\n          style={{ display: 'block', marginRight: '10px' }}>\r\n      Change name\r\n        </button>\r\n        <button\r\n          onClick={handleResetName}\r\n          style={{ display: 'block', marginLeft: ' 10px' }}>\r\n      Reset name\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport './App.css'\nimport { useForm } from './hooks/useForm'\nimport { Hello } from './Hello'\n\nconst App = () => {\n  const [inputs, setInputs] = useForm({\n    name: ' ',\n    email: ' ',\n    password: ' '\n  })\n\n  // useEffect(() => {\n  //   console.log('mount 1')\n  // }, [])\n\n  // useEffect(() => {\n  //   console.log('mount 2')\n  // }, [])\n\n  return (\n    <div className=\"App\">\n      <Hello />\n      <form id=\"form-container\"\n        style={{ minWidth: '50vw', display: 'flex', flexFlow: 'column wrap', padding: '15px' }}>\n        <div style={{ display: 'flex', flexFlow: 'row wrap', margin: 'auto', justifyContent: 'space-between', minWidth: '300px' }}>\n          <label\n            style={{ alignSelf: 'flex-start' }}\n            htmlFor=\"name\">NAME:\n          </label>\n          <input\n            aria-label=\"name-input\"\n            name=\"name\"\n            value={inputs.name}\n            placeholder=\"enter name\"\n            onChange={setInputs} />\n        </div>\n\n        <br/>\n        <div style={{ display: 'flex', flexFlow: 'row wrap', margin: 'auto', justifyContent: 'space-between', minWidth: '300px' }}>\n          <label\n            style={{ alignSelf: 'flex-start' }}\n            htmlFor=\"email\">EMAIL:\n          </label>\n          <input\n            aria-label=\"email-input\"\n            name=\"email\"\n            value={inputs.email}\n            placeholder=\"enter email\"\n            onChange={setInputs} />\n        </div>\n        <br />\n\n        <div style={{ display: 'flex', flexFlow: 'row wrap', margin: 'auto', justifyContent: 'space-between', minWidth: '300px' }}>\n          <label\n            style={{ display: 'flex', justifyContent: 'flex-start' }}\n            htmlFor=\"password\">PASSWORD:\n          </label>\n          <input\n            aria-label=\"password-input\"\n            name=\"password\"\n            value={inputs.password}\n            placeholder=\"enter password\"\n            onChange={setInputs} />\n        </div>\n\n      </form>\n    </div>\n  )\n}\n\nexport default App\n","import { useState } from 'react'\r\n\r\nexport const useForm = (initialValues) => {\r\n  const [values, setValues] = useState(initialValues)\r\n\r\n  return [\r\n    values,\r\n    e => {\r\n      setValues({ ...values, [e.target.name]: e.target.value })\r\n    }]\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}